<contact-form>
  <form class="mx-auto mt-12 grid max-w-3xl grid-cols-1 gap-4">
    <div>
      <label class="text-primary-200 block text-sm/6 font-medium" for="name">
        Name <span class="text-red-500">*</span>
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="name"
        id="name"
        required
      />
    </div>
    <div>
      <label class="text-primary-200 block text-sm/6 font-medium" for="company">
        Company <span class="text-red-500">*</span>
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="company"
        id="company"
        required
      />
    </div>
    <div>
      <label class="text-primary-200 block text-sm/6 font-medium" for="email">
        Email <span class="text-red-500">*</span>
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="email"
        id="email"
        type="email"
        required
      />
    </div>
    <div>
      <label class="text-primary-200 block text-sm/6 font-medium" for="phone">
        Phone
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="phone"
        id="phone"
      />
    </div>
    <div>
      <label class="text-primary-200 block text-sm/6 font-medium" for="message">
        Message
      </label>
      <textarea
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="message"
        id="message"
        rows="3"></textarea>
    </div>
    <button
      class="text-primary-100 mt-3 block w-full cursor-pointer rounded-md bg-blue-600 px-3 py-1.5 text-center text-sm/6 font-medium hover:bg-blue-700"
      type="submit"
    >
      Submit
    </button>
  </form>
</contact-form>
<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";
  
  // Load reCAPTCHA v3 script if site key is provided
  const RECAPTCHA_SITE_KEY = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;
  console.log('reCAPTCHA Site Key:', RECAPTCHA_SITE_KEY ? 'Configured' : 'Not configured');
  
  function loadRecaptcha() {
    if (!RECAPTCHA_SITE_KEY) {
      console.log('reCAPTCHA: No site key found, skipping reCAPTCHA');
      return;
    }
    const existing = document.getElementById('recaptcha-v3-script');
    if (existing) {
      console.log('reCAPTCHA: Script already loaded');
      return;
    }
    console.log('reCAPTCHA: Loading script...');
    const s = document.createElement('script');
    s.id = 'recaptcha-v3-script';
    s.src = `https://www.google.com/recaptcha/api.js?render=${RECAPTCHA_SITE_KEY}`;
    s.async = true;
    s.defer = true;
    s.onload = () => console.log('reCAPTCHA: Script loaded successfully');
    s.onerror = () => console.error('reCAPTCHA: Failed to load script');
    document.head.appendChild(s);
  }

  class ContactForm extends HTMLElement {
    form = this.querySelector<HTMLFormElement>("form");
    constructor() {
      super();
      // Initialize reCAPTCHA if available
      try { loadRecaptcha(); } catch {}
      this.form?.addEventListener("submit", async (e) => {
        e.preventDefault();
        if (!this.form?.checkValidity()) {
          return;
        }
        const formData = new FormData(this.form);
        
        // Obtain reCAPTCHA token if configured
        if (RECAPTCHA_SITE_KEY && typeof window !== 'undefined') {
          console.log('reCAPTCHA: Attempting to get token...');
          try {
            // Wait for grecaptcha to be ready
            await new Promise<void>((resolve) => {
              const ready = () => {
                console.log('reCAPTCHA: Ready callback triggered');
                resolve();
              };
              if ((window as any).grecaptcha && (window as any).grecaptcha.ready) {
                console.log('reCAPTCHA: Using grecaptcha.ready()');
                (window as any).grecaptcha.ready(ready);
              } else {
                console.log('reCAPTCHA: grecaptcha not ready, using fallback delay');
                // Fallback small delay if script not yet loaded
                setTimeout(ready, 300);
              }
            });
            if ((window as any).grecaptcha && (window as any).grecaptcha.execute) {
              console.log('reCAPTCHA: Executing token request...');
              const token = await (window as any).grecaptcha.execute(RECAPTCHA_SITE_KEY, { action: 'contact_form' });
              console.log('reCAPTCHA: Token obtained:', token ? 'Success' : 'Failed');
              formData.append('recaptchaToken', token);
            } else {
              console.error('reCAPTCHA: grecaptcha.execute not available');
            }
          } catch (err) {
            console.warn('reCAPTCHA token fetch failed:', err);
          }
        } else {
          console.log('reCAPTCHA: Skipped (no site key or not in browser)');
        }
        const { error } = await actions.contact(formData);
        if (!error) navigate("/success");
        else alert(error.message ?? 'Sorry, something went wrong. Please try again later.');
      });
    }
  }
  customElements.define("contact-form", ContactForm);
</script>
