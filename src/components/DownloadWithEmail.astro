---
interface Props {
  pdfUrl: string;
  title: string;
  buttonText?: string;
  buttonClass?: string;
}

const { 
  pdfUrl, 
  title, 
  buttonText = "Download PDF", 
  buttonClass = "text-primary-200 cursor-pointer rounded-full bg-blue-600 px-6 py-3 text-center font-semibold hover:bg-blue-700" 
} = Astro.props;
---

<download-with-email>
  <button
    class={buttonClass}
    data-pdf-url={pdfUrl}
    data-title={title}
  >
    {buttonText}
  </button>
  
  <!-- Email Popup Modal -->
  <div class="fixed inset-0 z-50 hidden bg-black bg-opacity-50 backdrop-blur-sm" data-popup-backdrop>
    <div class="flex min-h-full items-center justify-center p-4">
      <div class="bg-primary-900 relative w-full max-w-md rounded-lg p-6 shadow-xl">
        <!-- Close button -->
        <button
          type="button"
          class="text-primary-400 hover:text-primary-200 absolute right-4 top-4 text-2xl font-bold"
          data-close-popup
        >
          Ã—
        </button>
        
        <!-- Header -->
        <div class="mb-6">
          <h3 class="text-primary-100 text-xl font-bold">Download PDF</h3>
          <p class="text-primary-300 mt-2 text-sm">
            Please provide your email to download the PDF. We'll also send you a copy for your records.
          </p>
        </div>

        <!-- Form -->
        <form data-email-form class="space-y-4">
          <div>
            <label class="text-primary-200 block text-sm font-medium" for="popup-email">
              Email Address <span class="text-red-500">*</span>
            </label>
            <input
              class="text-primary-300 bg-primary-800 outline-primary-700 mt-1 block w-full rounded-md px-3 py-2 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm"
              name="email"
              type="email"
              required
              placeholder="your@email.com"
            />
          </div>
          
          <div class="flex items-start">
            <input
              class="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              type="checkbox"
              name="consent"
              required
            />
            <label class="text-primary-300 ml-2 text-sm">
              I agree to receive communications and updates from Critical Systems Analysis.
              <span class="text-red-500">*</span>
            </label>
          </div>

          <div class="flex gap-3 pt-4">
            <button
              type="button"
              class="text-primary-300 border-primary-600 hover:bg-primary-800 flex-1 rounded-md border px-4 py-2 text-sm font-medium"
              data-cancel-btn
            >
              Cancel
            </button>
            <button
              type="submit"
              class="text-primary-100 flex-1 rounded-md bg-blue-600 px-4 py-2 text-sm font-medium hover:bg-blue-700 disabled:opacity-50"
              data-submit-btn
            >
              Download PDF
            </button>
          </div>
        </form>
        
        <!-- Loading state -->
        <div class="hidden items-center justify-center py-8" data-loading-state>
          <div class="text-primary-300 text-center">
            <div class="mx-auto mb-2 h-6 w-6 animate-spin rounded-full border-2 border-blue-600 border-t-transparent"></div>
            <p class="text-sm">Sending email...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</download-with-email>

<script>
  import { actions } from "astro:actions";

  class DownloadWithEmail extends HTMLElement {
    private button: HTMLButtonElement;
    private backdrop: HTMLElement;
    private form: HTMLFormElement;
    private loadingState: HTMLElement;
    private pdfUrl: string;
    private documentTitle: string;

    constructor() {
      super();
      this.button = this.querySelector('button[data-pdf-url]')!;
      this.backdrop = this.querySelector('[data-popup-backdrop]')!;
      this.form = this.querySelector('[data-email-form]')!;
      this.loadingState = this.querySelector('[data-loading-state]')!;
      this.pdfUrl = this.button.dataset.pdfUrl!;
      this.documentTitle = this.button.dataset.title!;

      this.setupEventListeners();
    }

    private setupEventListeners() {
      // Show popup on button click
      this.button.addEventListener('click', () => this.show());
      
      // Close popup events
      this.querySelector('[data-close-popup]')?.addEventListener('click', () => this.hide());
      this.querySelector('[data-cancel-btn]')?.addEventListener('click', () => this.hide());
      this.backdrop.addEventListener('click', (e) => {
        if (e.target === this.backdrop) this.hide();
      });

      // Form submission
      this.form.addEventListener('submit', async (e) => {
        e.preventDefault();
        await this.handleSubmit();
      });

      // Escape key to close
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !this.backdrop.classList.contains('hidden')) {
          this.hide();
        }
      });
    }

    private async handleSubmit() {
      const formData = new FormData(this.form);
      const email = formData.get('email') as string;
      const consent = formData.get('consent');

      if (!email || !consent) {
        alert('Please fill in all required fields.');
        return;
      }

      // Show loading state
      this.form.classList.add('hidden');
      this.loadingState.classList.remove('hidden');
      this.loadingState.classList.add('flex');

      try {
        // Send email with PDF attachment
        const { error } = await actions.downloadPdf({
          email,
          pdfUrl: this.pdfUrl,
          title: this.documentTitle
        });

        if (error) {
          throw new Error(error.message);
        }

        this.hide();
        
        // Show success message
        alert('PDF has been sent to your email address successfully!');
      } catch (error) {
        console.error('Error:', error);
        alert('Sorry, something went wrong. Please try again later.');
        
        // Show form again
        this.loadingState.classList.add('hidden');
        this.loadingState.classList.remove('flex');
        this.form.classList.remove('hidden');
      }
    }

    private show() {
      this.backdrop.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      
      // Focus on email input
      setTimeout(() => {
        const emailInput = this.form.querySelector('input[type="email"]') as HTMLInputElement;
        emailInput?.focus();
      }, 100);
    }

    private hide() {
      this.backdrop.classList.add('hidden');
      document.body.style.overflow = '';
      
      // Reset form
      this.form.reset();
      this.form.classList.remove('hidden');
      this.loadingState.classList.add('hidden');
      this.loadingState.classList.remove('flex');
    }
  }

  customElements.define('download-with-email', DownloadWithEmail);
</script>