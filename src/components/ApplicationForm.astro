---
const siteKey = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;
---

{siteKey && (
  <script src={`https://www.google.com/recaptcha/api.js?render=${siteKey}`} async defer></script>
)}

<application-form>
  <form class="mx-auto mt-12 grid max-w-3xl grid-cols-1 gap-4">
    <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
      <div>
        <label
          class="text-primary-200 block text-sm/6 font-medium"
          for="firstName"
        >
          First name <span class="text-red-500">*</span>
        </label>
        <input
          class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
          name="firstName"
          id="firstName"
          placeholder="John"
          required
        />
      </div>
      <div>
        <label
          class="text-primary-200 block text-sm/6 font-medium"
          for="lastName"
        >
          Last name <span class="text-red-500">*</span>
        </label>
        <input
          class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
          name="lastName"
          id="lastName"
          placeholder="Doe"
          required
        />
      </div>
    </div>
    <div>
      <label class="text-primary-200 block text-sm/6 font-medium" for="email">
        Email <span class="text-red-500">*</span>
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="email"
        type="email"
        id="email"
        placeholder="john.doe@example.com"
        required
      />
    </div>
    <div>
      <label class="text-primary-200 block text-sm/6 font-medium" for="phone">
        Phone <span class="text-red-500">*</span>
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="phone"
        id="phone"
        placeholder="+1 (555) 123-4567"
        required
      />
    </div>
    <div>
      <label class="text-primary-200 block text-sm/6 font-medium" for="country">
        Country of residence <span class="text-red-500">*</span>
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="country"
        id="country"
        placeholder="United States"
        required
      />
    </div>
    <div>
      <label
        class="text-primary-200 block text-sm/6 font-medium"
        for="howDidYouHear"
      >
        How did you hear about us?
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="howDidYouHear"
        id="howDidYouHear"
        placeholder="LinkedIn, Google, Referral, etc."
      />
    </div>
    <div>
      <label
        class="text-primary-200 block text-sm/6 font-medium"
        for="position"
      >
        Position <span class="text-red-500">*</span>
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="position"
        id="position"
        placeholder="Software Engineer, Project Manager, etc."
        required
      />
    </div>
    <div>
      <label
        class="text-primary-200 block text-sm/6 font-medium"
        for="linkedin"
      >
        LinkedIn profile
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="linkedin"
        id="linkedin"
        placeholder="https://linkedin.com/in/your-profile"
      />
    </div>
    <div>
      <label class="text-primary-200 block text-sm/6 font-medium" for="resume">
        Resume <span class="text-red-500">*</span>
      </label>
      <input
        class="outline-primary-700 file:text-primary-200 file:bg-primary-700 bg-primary-800 text-primary-300 mt-0.5 block w-full cursor-pointer rounded-md outline-1 -outline-offset-1 file:me-4 file:px-4 file:py-2 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 focus:outline-none sm:text-sm/6"
        id="resume"
        name="resume"
        type="file"
        accept=".pdf,.doc,.docx"
        required
      />
    </div>
    <div>
      <label
        class="text-primary-200 block text-sm/6 font-medium"
        for="experience"
      >
        Years of experience
      </label>
      <input
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="experience"
        type="number"
        id="experience"
        min="1"
        placeholder="5"
      />
    </div>
    <div>
      <label
        class="text-primary-200 block text-sm/6 font-medium"
        for="comments"
      >
        Additional comments
      </label>
      <textarea
        class="text-primary-300 bg-primary-800 outline-primary-700 mt-0.5 block w-full rounded-md px-3 py-1.5 outline-1 -outline-offset-1 focus:outline-2 focus:-outline-offset-2 focus:outline-blue-600 sm:text-sm/6"
        name="comments"
        id="comments"
        rows="3"
        placeholder="Tell us about your relevant experience, skills, or why you're interested in this position..."></textarea>
    </div>
    {siteKey && (
      <div class="flex items-center justify-center text-xs text-gray-500 mt-2">
        <span>This site is protected by reCAPTCHA and the Google </span>
        <a href="https://policies.google.com/privacy" class="text-blue-400 hover:underline mx-1">Privacy Policy</a>
        <span> and </span>
        <a href="https://policies.google.com/terms" class="text-blue-400 hover:underline mx-1">Terms of Service</a>
        <span> apply.</span>
      </div>
    )}
    <button
      class="text-primary-100 mt-3 block w-full cursor-pointer rounded-md bg-blue-600 px-3 py-1.5 text-center text-sm/6 font-medium hover:bg-blue-700"
      type="submit"
    >
      Submit
    </button>
  </form>
</application-form>
<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  // Load reCAPTCHA v3 script if site key is provided
  const RECAPTCHA_SITE_KEY = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;
  console.log('reCAPTCHA Site Key:', RECAPTCHA_SITE_KEY ? 'Configured' : 'Not configured');

  class ApplicationForm extends HTMLElement {
    form = this.querySelector<HTMLFormElement>("form");
    constructor() {
      super();
      this.form?.addEventListener("submit", async (e) => {
        e.preventDefault();
        if (!this.form?.checkValidity()) {
          return;
        }
        
        const formData = new FormData(this.form);
        
        // Validate required file upload
        const resumeFile = formData.get('resume') as File;
        if (!resumeFile || resumeFile.size === 0) {
          alert('Please upload your resume.');
          return;
        }
        
        // Clean up empty optional fields
        const howDidYouHear = formData.get('howDidYouHear') as string;
        if (!howDidYouHear || howDidYouHear.trim() === '') {
          formData.delete('howDidYouHear');
        }
        
        const linkedin = formData.get('linkedin') as string;
        if (!linkedin || linkedin.trim() === '') {
          formData.delete('linkedin');
        }
        
        const experience = formData.get('experience') as string;
        if (!experience || experience.trim() === '') {
          formData.delete('experience');
        }
        
        const comments = formData.get('comments') as string;
        if (!comments || comments.trim() === '') {
          formData.delete('comments');
        }
        
        // Get reCAPTCHA token
        try {
          const siteKey = RECAPTCHA_SITE_KEY;
          console.log('reCAPTCHA Site Key:', siteKey ? 'Configured' : 'Not configured');
        
          if (siteKey && typeof window !== 'undefined') {
          try {
            console.log('reCAPTCHA: Starting token generation...');
            console.log('reCAPTCHA: Attempting to get token...');
            
            // Wait for grecaptcha to be ready
            await new Promise<void>((resolve) => {
              if ((window as any).grecaptcha && (window as any).grecaptcha.ready) {
                (window as any).grecaptcha.ready(() => resolve());
              } else {
                console.log('reCAPTCHA: Script not loaded, waiting...');
                const checkInterval = setInterval(() => {
                  if ((window as any).grecaptcha && (window as any).grecaptcha.ready) {
                  clearInterval(checkInterval);
                  (window as any).grecaptcha.ready(() => resolve());
                }
                }, 100);
                
                // Timeout after 10 seconds
                setTimeout(() => {
                  clearInterval(checkInterval);
                  console.log('reCAPTCHA: Timeout waiting for script');
                  resolve();
                }, 10000);
              }
            });
            
            console.log('reCAPTCHA: grecaptcha ready, executing...');
            
            if ((window as any).grecaptcha && (window as any).grecaptcha.execute) {
                const token = await (window as any).grecaptcha.execute(siteKey, { action: 'application' });
              console.log('reCAPTCHA: Token obtained:', token ? 'Success' : 'Failed');
              if (token) {
                formData.append('recaptchaToken', token);
              }
            } else {
              console.log('reCAPTCHA: grecaptcha.execute not available');
            }
          } catch (error) {
            console.error('reCAPTCHA: Error getting token:', error);
          }
          } else {
            console.log('reCAPTCHA: No site key found, skipping reCAPTCHA');
          }
        } catch (error) {
          console.error('reCAPTCHA: Error in token generation:', error);
        }
        
        const { error } = await actions.application(formData);
        if (error) {
          // Display validation errors to the user
          if (error.code === 'BAD_REQUEST') {
            // Check if it's a validation error with field details
            if (error.message && error.message.includes('linkedin')) {
              alert('LinkedIn: Please enter a valid LinkedIn URL or leave this field empty');
            } else {
              alert('Please check your form inputs and try again.');
            }
          } else {
            alert('An error occurred while submitting your application. Please try again.');
          }
        } else {
          navigate("/success");
        }
      });
    }
  }
  customElements.define("application-form", ApplicationForm);
</script>
